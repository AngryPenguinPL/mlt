--- mlt-6.4.1/src/modules/avformat/consumer_avformat.c.omv~	2018-01-27 20:33:26.915955246 +0100
+++ mlt-6.4.1/src/modules/avformat/consumer_avformat.c	2018-01-27 20:39:22.488417987 +0100
@@ -578,7 +578,7 @@ static AVStream *add_audio_stream( mlt_c
 #endif
 	
 		if (oc->oformat->flags & AVFMT_GLOBALHEADER) 
-			c->flags |= CODEC_FLAG_GLOBAL_HEADER;
+			c->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
 		
 		// Allow the user to override the audio fourcc
 		if ( mlt_properties_get( properties, "atag" ) )
@@ -604,7 +604,7 @@ static AVStream *add_audio_stream( mlt_c
 		int audio_qscale = mlt_properties_get_int( properties, "aq" );
 		if ( audio_qscale > QSCALE_NONE )
 		{
-			c->flags |= CODEC_FLAG_QSCALE;
+			c->flags |= AV_CODEC_FLAG_QSCALE;
 			c->global_quality = FF_QP2LAMBDA * audio_qscale;
 		}
 
@@ -703,7 +703,7 @@ static int open_audio( mlt_properties pr
 		if ( !strcmp( oc->oformat->name, "mp4" ) ||
 			 !strcmp( oc->oformat->name, "mov" ) ||
 			 !strcmp( oc->oformat->name, "3gp" ) )
-			c->flags |= CODEC_FLAG_GLOBAL_HEADER;
+			c->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
 	}
 	else
 	{
@@ -834,7 +834,7 @@ static AVStream *add_video_stream( mlt_c
 
 		if ( mlt_properties_get_double( properties, "qscale" ) > 0 )
 		{
-			c->flags |= CODEC_FLAG_QSCALE;
+			c->flags |= AV_CODEC_FLAG_QSCALE;
 			c->global_quality = FF_QP2LAMBDA * mlt_properties_get_double( properties, "qscale" );
 		}
 
@@ -851,16 +851,16 @@ static AVStream *add_video_stream( mlt_c
 
 		// Some formats want stream headers to be seperate
 		if ( oc->oformat->flags & AVFMT_GLOBALHEADER ) 
-			c->flags |= CODEC_FLAG_GLOBAL_HEADER;
+			c->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
 
 		// Translate these standard mlt consumer properties to ffmpeg
 		if ( mlt_properties_get_int( properties, "progressive" ) == 0 &&
 		     mlt_properties_get_int( properties, "deinterlace" ) == 0 )
 		{
 			if ( ! mlt_properties_get( properties, "ildct" ) || mlt_properties_get_int( properties, "ildct" ) )
-				c->flags |= CODEC_FLAG_INTERLACED_DCT;
+				c->flags |= AV_CODEC_FLAG_INTERLACED_DCT;
 			if ( ! mlt_properties_get( properties, "ilme" ) || mlt_properties_get_int( properties, "ilme" ) )
-				c->flags |= CODEC_FLAG_INTERLACED_ME;
+				c->flags |= AV_CODEC_FLAG_INTERLACED_ME;
 		}
 		
 		// parse the ratecontrol override string
@@ -897,13 +897,13 @@ static AVStream *add_video_stream( mlt_c
 		// Setup dual-pass
 		i = mlt_properties_get_int( properties, "pass" );
 		if ( i == 1 )
-			c->flags |= CODEC_FLAG_PASS1;
+			c->flags |= AV_CODEC_FLAG_PASS1;
 		else if ( i == 2 )
-			c->flags |= CODEC_FLAG_PASS2;
+			c->flags |= AV_CODEC_FLAG_PASS2;
 #ifdef AV_CODEC_ID_H265
 		if ( codec->id != AV_CODEC_ID_H265 )
 #endif
-		if ( codec->id != AV_CODEC_ID_H264 && ( c->flags & ( CODEC_FLAG_PASS1 | CODEC_FLAG_PASS2 ) ) )
+		if ( codec->id != AV_CODEC_ID_H264 && ( c->flags & ( AV_CODEC_FLAG_PASS1 | AV_CODEC_FLAG_PASS2 ) ) )
 		{
 			FILE *f;
 			int size;
@@ -918,7 +918,7 @@ static AVStream *add_video_stream( mlt_c
 				mlt_properties_from_utf8( properties, "_passlogfile", "_logfilename" );
 			}
 			const char *filename = mlt_properties_get( properties, "_logfilename" );
-			if ( c->flags & CODEC_FLAG_PASS1 )
+			if ( c->flags & AV_CODEC_FLAG_PASS1 )
 			{
 				f = fopen( filename, "w" );
 				if ( !f )
@@ -1832,7 +1832,7 @@ static void *consumer_thread( void *arg
 						}
 					}
 
-					if (oc->oformat->flags & AVFMT_RAWPICTURE) 
+					if (oc->oformat->video_codec == AV_CODEC_ID_RAWVIDEO) 
 					{
 	 					// raw video case. The API will change slightly in the near future for that
 						AVPacket pkt;
@@ -2044,7 +2044,7 @@ static void *consumer_thread( void *arg
 		}
 
 		// Flush video
-		if ( video_st && !( oc->oformat->flags & AVFMT_RAWPICTURE ) ) for (;;)
+		if ( video_st && !( oc->oformat->video_codec == AV_CODEC_ID_RAWVIDEO ) ) for (;;)
 		{
 			AVCodecContext *c = video_st->codec;
 			AVPacket pkt;
--- mlt-6.4.1/src/modules/avformat/filter_avresample.c.omv~	2018-01-27 20:17:54.282237142 +0100
+++ mlt-6.4.1/src/modules/avformat/filter_avresample.c	2018-01-27 20:52:54.528853618 +0100
@@ -28,6 +28,8 @@
 // ffmpeg Header files
 #include <libavformat/avformat.h>
 #include <libavutil/samplefmt.h>
+#include <libavutil/opt.h>
+#include <libavresample/avresample.h>
 
 #if defined(FFUDIV)
 
@@ -52,7 +54,7 @@ static int resample_get_audio( mlt_frame
 	int16_t *sample_buffer = mlt_properties_get_data( filter_properties, "buffer", NULL );
 
 	// Obtain the resample context if it exists
-	ReSampleContext *resample = mlt_properties_get_data( filter_properties, "audio_resample", NULL );
+	AVAudioResampleContext *resample = mlt_properties_get_data( filter_properties, "audio_resample", NULL );
 
 	// If no resample frequency is specified, default to requested value
 	if ( output_rate == 0 )
@@ -82,11 +84,23 @@ static int resample_get_audio( mlt_frame
 		if ( resample == NULL || *frequency != mlt_properties_get_int( filter_properties, "last_frequency" ) )
 		{
 			// Create the resampler
-			resample = av_audio_resample_init( *channels, *channels, output_rate, *frequency,
-				AV_SAMPLE_FMT_S16, AV_SAMPLE_FMT_S16, 16, 10, 0, 0.8 );
+			//resample = av_audio_resample_init( *channels, *channels, output_rate, *frequency,
+			//	AV_SAMPLE_FMT_S16, AV_SAMPLE_FMT_S16, 16, 10, 0, 0.8 );
+			resample = avresample_alloc_context();
+			av_opt_set_int(resample, "in_channel_layout", *channels, 0);
+			av_opt_set_int(resample, "out_channel_layout", *channels, 0);
+			av_opt_set_int(resample, "in_sample_rate", *frequency, 0);
+			av_opt_set_int(resample, "out_sample_rate", output_rate, 0);
+			av_opt_set_int(resample, "in_sample_fmt", AV_SAMPLE_FMT_S16, 0);
+			av_opt_set_int(resample, "out_sample_fmt", AV_SAMPLE_FMT_S16, 0);
+			av_opt_set_int(resample, "filter_length", 16, 0);
+			av_opt_set_int(resample, "log2_phase_count", 10, 0);
+			av_opt_set_int(resample, "linear", 0, 0);
+			av_opt_set_double(resample, "cutoff", 0.8, 0);
+			avresample_open(resample);
 
 			// And store it on properties
-			mlt_properties_set_data( filter_properties, "audio_resample", resample, 0, ( mlt_destructor )audio_resample_close, NULL );
+			mlt_properties_set_data( filter_properties, "audio_resample", resample, 0, ( mlt_destructor )avresample_close, NULL );
 
 			// And remember what it was created for
 			mlt_properties_set_int( filter_properties, "last_frequency", *frequency );
@@ -95,7 +109,8 @@ static int resample_get_audio( mlt_frame
 		mlt_service_unlock( MLT_FILTER_SERVICE( filter ) );
 
 		// Resample the audio
-		used = audio_resample( resample, sample_buffer, *buffer, *samples );
+		//used = audio_resample( resample, sample_buffer, *buffer, *samples );
+		used = avresample_convert( resample, (uint8_t**)&sample_buffer, 0, av_rescale_rnd(avresample_get_delay(resample) + *samples, AV_SAMPLE_FMT_S16, AV_SAMPLE_FMT_S16, AV_ROUND_UP), (uint8_t* const *)buffer, 0, *samples);
 		int size = used * *channels * sizeof( int16_t );
 
 		// Resize if necessary
--- mlt-6.4.1/src/modules/avformat/Makefile.omv~	2018-01-27 20:40:39.196512796 +0100
+++ mlt-6.4.1/src/modules/avformat/Makefile	2018-01-27 20:41:16.392558306 +0100
@@ -1,5 +1,5 @@
 CFLAGS += -I../..
-LDFLAGS += -L../../framework -lmlt -lpthread -lm
+LDFLAGS += -L../../framework -lmlt -lpthread -lm -lavutil -lavresample
 
 include ../../../config.mak
 include config.mak
